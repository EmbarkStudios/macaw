[package]
name = "macaw"
version = "0.20.0"
license = "MIT OR Apache-2.0"
description = "An opinionated game math library built on top the excellent glam"
keywords = ["gamedev", "math"]
categories = ["game-engines"]
authors = ["Embark Studios <opensource@embark-studios.com>"]
edition = "2024"
documentation = "https://docs.rs/macaw"
homepage = "https://github.com/EmbarkStudios/macaw"
repository = "https://github.com/EmbarkStudios/macaw"
# note that since macaw is built for vulkan as well, the nightly version used
# when compiling shaders might be "behind" the current stable version failing
# compilation
#rust-version.workspace = true
publish = true

[lints.clippy]
# BEGIN - Embark standard lints v5 for Rust 1.55+
# do not change or add/remove here, but one can add exceptions after this section and comment out it here for that
# for more info see: <https://github.com/EmbarkStudios/rust-ecosystem/issues/59>
all = { level = "warn", priority = -1 }
await_holding_lock = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
clear_with_drain = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
disallowed_methods = "warn"
disallowed_types = "warn"
doc_markdown = "warn"
empty_enum = "warn"
enum_glob_use = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
from_iter_instead_of_collect = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
inefficient_to_string = "warn"
invalid_upcast_comparisons = "warn"
large_digit_groups = "warn"
large_stack_arrays = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_ok_or = "warn"
map_err_ignore = "warn"
map_flatten = "warn"
map_unwrap_or = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
missing_enforced_import_renames = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
rc_mutex = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
single_match_else = "warn"
string_add_assign = "warn"
string_add = "warn"
string_lit_as_bytes = "warn"
string_to_string = "warn"
todo = "warn"
#trait_duplication_in_bounds = "warn"
unimplemented = "warn"
unnecessary_box_returns = "warn"
unnested_or_patterns = "warn"
unused_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
zero_sized_map_values = "warn"
# END - Embark standard lints v5 for Rust 1.55+

[lints.rust]
# To support rust-gpu
unexpected_cfgs = { level = "allow", check-cfg = [
    'cfg(target_arch, values("spirv"))',
] }

[lib]
doctest = false
test = true

[[bench]]
harness = false
name = "iso_transform"

[[bench]]
harness = false
name = "bounding_box"

[[bench]]
harness = false
name = "conformal3"

[dependencies]
bytemuck = { version = "1", optional = true }
glam = { version = "0.30" }
serde = { version = "1.0", default-features = false, optional = true, features = [
    "derive",
] }
speedy = { version = "0.8", optional = true }

[target.'cfg(target_arch = "spirv")'.dependencies]
num-traits = { version = "0.2.14", default-features = false, features = [
    "libm",
] }

[dev-dependencies]
tiny-bench = "0.3.0"

[features]
default = ["std"]
libm = ["glam/libm"]
std = ["glam/std"]
mint = ["glam/mint"]
bytemuck = ["dep:bytemuck", "glam/bytemuck", "bytemuck/derive"]
serde = ["dep:serde", "glam/serde"]
speedy = ["dep:speedy", "glam/speedy"]

# enable additional checks if debug assertions are enabled
debug_assert = ["glam/debug-glam-assert"]
# always enable additional checks
assert = ["glam/glam-assert"]
